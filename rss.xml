<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Renee Huang]]></title><description><![CDATA[A simple, fixed sidebar two columns Gatsby.js blog starter.]]></description><link>http://riiniii.github.io/code-bites</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 29 Nov 2021 04:25:00 GMT</lastBuildDate><item><title><![CDATA[MVC vs MVT (React and Django)]]></title><description><![CDATA[As someone who develops with React on a day to day basis, the Model View Controller (MVC) is a architectural paradigm that I should know…]]></description><link>http://riiniii.github.io/code-bites/MVC vs MVT (React and Django)/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/MVC vs MVT (React and Django)/</guid><pubDate>Sun, 28 Nov 2021 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;As someone who develops with React on a day to day basis, the &lt;strong&gt;M&lt;/strong&gt;odel &lt;strong&gt;V&lt;/strong&gt;iew &lt;strong&gt;C&lt;/strong&gt;ontroller (MVC) is a architectural paradigm that I &lt;em&gt;should&lt;/em&gt; know more about, but I don’t.&lt;/p&gt;
&lt;p&gt;I’ve read about in in React documentation when I was just starting out with it, have heard it mentioned in interviews, and now have heard about its counterpart - the &lt;strong&gt;M&lt;/strong&gt;odel &lt;strong&gt;V&lt;/strong&gt;iew &lt;strong&gt;T&lt;/strong&gt;emplate - while trying to pick up Django.&lt;/p&gt;
&lt;p&gt;It’s about time for me to hash out what each of these mean and gain a solid understanding of each.&lt;/p&gt;
&lt;p&gt;So what do each of these excel at, what types of problems do they solve, and where can I commonly find each of these?&lt;/p&gt;
&lt;p&gt;This little code bite seeks to answer these questions.&lt;/p&gt;
&lt;h2&gt;Model View Controller (MVC)&lt;/h2&gt;
&lt;p&gt;The MVC framework separates the code into three components, with a unidirectional data flow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model - The layer deals with data-related logic. It retrieves, changes, and saves data to the database.&lt;/li&gt;
&lt;li&gt;View - The presentation layer responsible for collecting data from the model or user and presenting it. Everything in the browser GUI falls under view&lt;/li&gt;
&lt;li&gt;Controller - This layer controls the data flow and interaction between the view and model layer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;makes it easy to develop large applications&lt;/li&gt;
&lt;li&gt;easy for multiple developers to collaborate and work together&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;view is controlled by model and controller&lt;/li&gt;
&lt;li&gt;not suitable for small applications&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Model View Template (MVT)&lt;/h2&gt;
&lt;p&gt;The MVT (or MTV) framework also separates code into three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Model - This layer contains code responsible for dealing with data and databases.&lt;/li&gt;
&lt;li&gt;View - This layer decides what data should be displayed, rather than like the Controller does in the MVC framework.&lt;/li&gt;
&lt;li&gt;Template - This layer specifies a structure for an output.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Less coupled&lt;/li&gt;
&lt;li&gt;suitable for small to large scale applications&lt;/li&gt;
&lt;li&gt;easy to modify&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Disadvantages&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sometimes confusing to understand the flow&lt;/li&gt;
&lt;li&gt;modification of models/views should be done carefully without affecting templates&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The main difference between MVC and MVT is that a MVC has their controller determine what should be shown, but in a MVT we already have a template, and the framework (via the View layer) helps determine the controller part itself.&lt;/p&gt;
&lt;p&gt;So, for a MVC pattern, we manage the state of the application and have the view controlled by the controller and the model.&lt;/p&gt;
&lt;p&gt;In an MVT, the view itself queries the model and processes the results from the model. The view fills in a template and sends it to a user. Here, the view is not coupled with a model, and thus becomes more loosely coupled and more easy to modify than a MVC.&lt;/p&gt;
&lt;h2&gt;React&lt;/h2&gt;
&lt;p&gt;Often times people think about React and MVC together. React, though easy to implement the MVC framework with, is in it of itself not an MVC framework. React is just a &lt;em&gt;library&lt;/em&gt; for building composable user interfaces. React was introduced as a new option that stemmed away from traditional web application UIs that were built using templates or HTML directives (like Django did).&lt;/p&gt;
&lt;h3&gt;Model View View-Model (MVVM)&lt;/h3&gt;
&lt;p&gt;It’s been said that your React project can take on the form of a more MVVM design, where the &lt;a href=&quot;https://stackoverflow.com/questions/51506440/mvvm-architectural-pattern-for-a-reactjs-application&quot;&gt;View-Model is the component related code that manages simple state, passes data directly onto View, and potentially passes data directly back from View.&lt;/a&gt; It is argued that MVVM is a more accurate depiction of most React applications (excluding when you implement &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux React&lt;/a&gt; and as a result enforces unidirectional data flow) as MVVM includes bidirectional data flow - something most React applications have.&lt;/p&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;p&gt;Django began as a web &lt;em&gt;framework&lt;/em&gt; that allows users to follow along the MVT design principle (but with the right configuration, can also move away from that). Django is usable for both the front and backend and comes along with a lot of extra bells and whistles. For me, that’s something to dive deeper into!&lt;/p&gt;
&lt;p&gt;You might find Django labeled as a MVC pattern, as it “follows the pattern closely enough to be called one.” I agree since I kind of have to fold some ideas to fit into the MVC pattern a bit, but for me Django seems better suited with the MVT/MTV framework due to Django’s use of templates. There’s a slight distinction that is &lt;a href=&quot;https://djangobook.com/mdj2-django-structure/&quot;&gt;better hashed out here.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;In summary&lt;/h2&gt;
&lt;p&gt;For me, after this little bit of research, I’ve found that React follows more of a MVVM framework due to its bidirectional data flow, unless you implement Flux React, which then more closely follows the MVC framework due to its unidirectional data flow. Django follows the MVT/MTV design more closely, but has been confused with the MVC design principle in the past. The MVC has the controller and acts as a coordinator between the View and the Model, and apparently &lt;a href=&quot;http://ASP.NET&quot;&gt;ASP.NET&lt;/a&gt; uses the MVC design.&lt;/p&gt;
&lt;p&gt;React is just a UI library component that is not very opinionated, and allows for you to play into various types of architecture as your web application needs. Django is a web development framework that is super strong (as in, it has a lot of easy to add functionalities) and encompasses both backend and frontend.&lt;/p&gt;
&lt;p&gt;When using React, it may be confusing to decide on which architectural design principle to use. For me, I’ll probably stick to the MVVM format and focus on designing components that are loosely coupled and modular - all the general good coding design principle jazz. I enjoy using React a lot, and don’t see myself using Templates any time soon (with Django). I’ll try my hand at using Django just for developing RESTful APIs.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Creating a CLI Tool]]></title><description><![CDATA[I’ve recently come across the need to create a script to generate seed data for a project. I wanted developers to be able to run this script…]]></description><link>http://riiniii.github.io/code-bites/Creating a CLI Tool/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/Creating a CLI Tool/</guid><pubDate>Mon, 08 Nov 2021 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;I’ve recently come across the need to create a script to generate seed data for a project. I wanted developers to be able to run this script by providing the tables they wanted to populate and a json file that had the details for each row of the table(s).&lt;/p&gt;
&lt;p&gt;While writing the script, I realized that I had no clue on best practices on how to write this CLI! I felt at the very basic level I could implement encapsulation - providing an easy to use CLI but not letting developers worry about the implementation details. I also wanted developers to be able to control certain settings through flags, but is there a well known interface (like &lt;a href=&quot;https://www.redhat.com/en/topics/api/what-is-a-rest-api&quot;&gt;RESTful API&lt;/a&gt; interfaces?) that I could use?&lt;/p&gt;
&lt;p&gt;The following writing contains my findings on best practices for designing a CLI.&lt;/p&gt;
&lt;h3&gt;The Basics&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Use a command line parsing library when you can&lt;/li&gt;
&lt;li&gt;Return zero exit code on success, non-zero on failures.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send output to stdout (or your equivalent in your environment)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;what’s the equivalent in javascript?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send messaging to stderr (so that log messaging, errors will all go to one place and not be fed to the next command)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;what’s the equivalent in javascript?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;when passed no options, -h, or the—help flag, return a description of what your program does, one or two examples of invocation, description of flags, and where to go for more information.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;don’t overload -h&lt;/li&gt;
&lt;li&gt;show most common flags&lt;/li&gt;
&lt;li&gt;use formatting in your help text&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;General Tips&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Show progress visually &amp;#x26; in an easily readable way&lt;/li&gt;
&lt;li&gt;Create a reaction for every action&lt;/li&gt;
&lt;li&gt;Create human readable output (errors, action results, progress info, etc.), have a good signal-to-noise ratio&lt;/li&gt;
&lt;li&gt;Support your skim-readers - keep things succinct!&lt;/li&gt;
&lt;li&gt;Suggest next best step&lt;/li&gt;
&lt;li&gt;Consider your options and how you may suggest them for users who are missing some essential information&lt;/li&gt;
&lt;li&gt;Provide an easy way out&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flags over args&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;have a full length version of all flags (ex. -h and —help do the same things)&lt;/li&gt;
&lt;li&gt;see if you can use standard name for flags first&lt;/li&gt;
&lt;li&gt;make flag order independent if possible&lt;/li&gt;
&lt;li&gt;don’t put private data (like token) in flags&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;consider offering documentation, whether it be via the web, terminal-based, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Man_page&quot;&gt;man-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;never require a prompt - allow for everything to be done in one line via flags&lt;/li&gt;
&lt;li&gt;confirm with user before making a “big” change (ex. deleting a file, folder, or even an entire application)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;on robustness,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;validate user input&lt;/li&gt;
&lt;li&gt;responsive is more important than fast&lt;/li&gt;
&lt;li&gt;show progress if something is taking a long time&lt;/li&gt;
&lt;li&gt;do stuff in parallel when you can, but be thoughtful about it&lt;/li&gt;
&lt;li&gt;make things time out&lt;/li&gt;
&lt;li&gt;make it idempotent&lt;/li&gt;
&lt;li&gt;make it crash only&lt;/li&gt;
&lt;li&gt;people will misuse your program 😢&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;future proofing your CLI&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;make changes additive where you can (&amp;#x26; ensure for backwards compatibility)&lt;/li&gt;
&lt;li&gt;warn before you make a non-additive change&lt;/li&gt;
&lt;li&gt;don’t allow arbitrary abbreviations of subcommands, it’ll take up future wording that you might actually want to mean something&lt;/li&gt;
&lt;li&gt;don’t create a time bomb (aka don’t rely on external dependency where possible)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Great articles from where I got my information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://clig.dev/&quot;&gt;Command Line Interface Guidelines&lt;/a&gt; - a must read&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.developer.atlassian.com/10-design-principles-for-delightful-clis/&quot;&gt;10 Design Principles for delightful CLIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/cli-style-guide&quot;&gt;Heroku’s CLI Style Guide Specifics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46&quot;&gt;12 Factors for CLI Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html&quot;&gt;POSIX Utility Conventions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Monorepo vs Polyrepo]]></title><description><![CDATA[For more detailed differences and explanations, please go to the link(s) provided below! This was written to decide what to use for a…]]></description><link>http://riiniii.github.io/code-bites/Monorepo-vs-Polyrepo/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/Monorepo-vs-Polyrepo/</guid><pubDate>Sat, 30 Oct 2021 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;For more detailed differences and explanations, please go to the link(s) provided below! This was written to decide what to use for a project I was taking on, but I quickly decided that monorepo is sufficient for my needs and thus this articles is not quite fleshed out as others available on the web!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We’re starting a new project and wondering how we should structure our repository? I’ve seen code bases be contained in a single repository and in multiple. This sounded somewhat like monorepo and polyrepo. These two phrases mean exactly what they say, but lets go through two examples to make it very clear.&lt;/p&gt;
&lt;p&gt;When we have a monorepo, it can contain our code for our web application, our mobile application, our server/backend code, and maybe any microservices too all in &lt;strong&gt;one repository&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we have a polyrepo, our code for our web application, mobile application, server/backend code, etc., would all be located in separate repositories.&lt;/p&gt;
&lt;p&gt;From reading the article above, it looks like for smaller sized projects where you are creating for only one product, one repository is sufficient for your code.&lt;/p&gt;
&lt;p&gt;If you have multiple products, or as your code base scales to above certain sizes (ex. 10-100 developers writing code full time, 1k-10k versioned dependencies), then it’d be good to consider a polyrepo.&lt;/p&gt;
&lt;p&gt;I would write more, but there are too many great articles out there so I’ll leave that to them.&lt;/p&gt;
&lt;p&gt;For my case, I’ve concluded that at least for the next two plus years our project will be sufficiently contained and workable in a monorepo.&lt;/p&gt;
&lt;p&gt;Kind, amazing, and great resources used to write this up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/joelparkerhenderson/monorepo-vs-polyrepo&quot;&gt;monorepo-vs-polyrepo&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://earthly.dev/blog/monorepo-vs-polyrepo/&quot;&gt;monorepo-vs polyrepo 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Enhancing Your React Web Application From the Client Side]]></title><description><![CDATA[There are many things you could focus on when trying to enhance the performance of your web application. This article will introduce key…]]></description><link>http://riiniii.github.io/code-bites/Enhancing React Web Application/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/Enhancing React Web Application/</guid><pubDate>Mon, 04 Jan 2021 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;There are many things you could focus on when trying to enhance the performance of your web application. This article will introduce key points in which I was able to improve my React web application from the client side. Every application is different and has their own bottlenecks, limitations, and sets of users, but the following points are a good starting point! &lt;/p&gt;
&lt;h2&gt;Removing Unused Code&lt;/h2&gt;
&lt;p&gt;Software development can take awhile. Throughout that time you may accumulate a lot of technical debt in the form of unused JavaScript code, unused CSS, or even multiple imports of the same library! &lt;/p&gt;
&lt;p&gt;Wow, how does that happen? It happened when you use a library wrapping a third party library, and then the actual application references the third party library directly, thereby creating two references to the same library. A simple fix but a necessary one! We were able to save over 1MB by removing the old and outdated imports. &lt;/p&gt;
&lt;h3&gt;Researching Your Application Bundle Size&lt;/h3&gt;
&lt;p&gt;Before you make any changes, you should first research and analyze your web application. I recommend these two libraries to help understand your application better: &lt;a href=&quot;https://www.npmjs.com/package/webpack-bundle-analyzer&quot;&gt;webpack-bundle-analyzer,&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/source-map-explorer&quot;&gt;source-map-explorer&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance&quot;&gt;Chrome Devtools (Performance Analyzer)&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;Shoutouts to Specific Libraries&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Lodash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another way you can accidentally introduce more bloat to your library is when you use a large library like Lodash. Generally, you would only use a few (or more!) functions from Lodash. However, if you import lodash incorrectly, it begins to import the whole library — a hefty size of 500KB!&lt;/p&gt;
&lt;p&gt;We can and must make sure that our imported libraries are as lean as possible. Luckily there are a few plugins and ways to tree-shake unused code with libraries such as &lt;a href=&quot;https://www.npmjs.com/package/babel-plugin-lodash&quot;&gt;babel-plugin-lodash&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/lodash-webpack-plugin&quot;&gt;webpack-lodash-plugin&lt;/a&gt;, lodash-es. Webpack v4 supposedly also supports lodash tree-shaking.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/making-internets/why-using-chain-is-a-mistake-9bc1f80d51ba&quot;&gt;Note&lt;/a&gt;: if you use _.chain, the method will import most of the Lodash library, so avoid it if possible!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Moment.js&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moment.js is a large and hefty library coming in at around 250KB. The way it is written makes it difficult for unused code to be tree-shaken. There is even a whole Github repository on why &lt;a href=&quot;https://github.com/you-dont-need/You-Dont-Need-Momentjs&quot;&gt;You Don’t Need Moment.js&lt;/a&gt;. So… well… do you? If you don’t, there are many smaller sized libraries out there that may suit your needs well! &lt;/p&gt;
&lt;p&gt;These are just two specific libraries that often come up when you are looking to reduce bundle size. Perhaps the larger takeaway is to &lt;em&gt;be meticulous with introducing libraries and to make sure that they suit your needs well (performance and utility wise)&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;Moving Image Requests To Inlined Images&lt;/h2&gt;
&lt;p&gt;Our application had several small icons loaded from HTTP requests on every initial page load, taking approximately 0.5 seconds every time. This half a second is a lot for some tiny icons!&lt;/p&gt;
&lt;p&gt;Because our icons were so small, and under 5KB each, we decided to inline them with the help of webpack, using the library &lt;a href=&quot;https://v4.webpack.js.org/loaders/svg-inline-loader/&quot;&gt;svg-inline-loader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This particular point goes in line with the larger idea that you must ”&lt;em&gt;audit when and how assets are fetched.&lt;/em&gt;” &lt;/p&gt;
&lt;h2&gt;Reducing React Re-Renders&lt;/h2&gt;
&lt;p&gt;Reduce DOM updates and re-calculations by making sure that your React code only re-renders when necessary. You can do things like move from Class Components to functional components to reduce your amount of code, use shouldComponentUpdate to fine tune your react renders, and more. &lt;/p&gt;
&lt;h2&gt;Optimize Your Webpack Bundles&lt;/h2&gt;
&lt;p&gt;On Chrome Devtools you can analyze your network chunks, and how your code is being loaded in. If your initial chunks of code are coming in and create a hilly mountain landscape, then that means that your chunks can be chunked in a more optimized way. Ideally, our chunks should look evenly sized throughout so that the page can become interactie at a faster time. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The above points were where I could find the most bang for my bunk in terms of development time and improving our application performance. Through this journey I realized that fine tuning performance in itself is a very long journey, and that you can get more and more detailed with improving the performance of your application. &lt;/p&gt;
&lt;p&gt;The above points are a good starting point  for improving your web applications performance on initial load. Another performance journey you could embark on is ensuring all &lt;a href=&quot;https://web.dev/rail/&quot;&gt;interactions of your applications are performant&lt;/a&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Sources&lt;/h3&gt;
&lt;p&gt;When undergoing my own web application performance journey I underwent a fun and long googling session. These are the standouts to which I must give thanks to: &lt;a href=&quot;https://medium.com/expedia-group-tech/12-tips-to-improve-client-side-page-performance-88c7bec27933&quot;&gt;12 Tips To Improving Client Side Performance&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot;&gt;Google Lighthouse&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.com/questions/23210126/inline-svg-vs-svg-file-performance&quot;&gt;SVG Inline or as HTTP Requests&lt;/a&gt;, &lt;a href=&quot;https://medium.com/bootstart/why-using-chain-is-a-mistake-9bc1f80d51ba&quot;&gt;Why Using _.chain is a Mistake&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/evaluate-performance&quot;&gt;Evaluate Web Performance&lt;/a&gt;, and the &lt;a href=&quot;https://web.dev/rail/&quot;&gt;RAIL Model&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Redux vs React Context]]></title><description><![CDATA[The ever-burning question of what really is the difference between Redux and React Context, and when should we use Redux or React Context…]]></description><link>http://riiniii.github.io/code-bites/Redux vs React Context/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/Redux vs React Context/</guid><pubDate>Sun, 27 Dec 2020 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;The ever-burning question of what really is the difference between Redux and React Context, and when should we use Redux or React Context…?&lt;/p&gt;
&lt;p&gt;When we look at things from a very, very, very… very… high level, it may seem that they do the same things. Both are able to update values from one part of your React web application and have the updated values reflected in another. From a very high level this stands true. But when we zoom in there are, of course, differences.&lt;/p&gt;
&lt;p&gt;Here are the differences in a nutshell:&lt;/p&gt;
&lt;h3&gt;React Context&lt;/h3&gt;
&lt;p&gt;React Context is &lt;strong&gt;not&lt;/strong&gt; a state management tool like Redux is, it’s actually based on the dependency injection pattern. Thus, React Context through its dependency injection pattern supports abstractions, makes it easier to decompose program components, all with the wonderful feature of allowing props to be accessible through many levels of components without props drilling. React Context only supports passing down one value, though that value can be an object containing many values.&lt;/p&gt;
&lt;h3&gt;Redux&lt;/h3&gt;
&lt;p&gt;Redux on the other hand is fully fledged application state manager that can be used across many different languages and frameworks (not just React!). Redux is good for large and complicated web applications, and is good for visualizing and understanding well how the changes were made over time.&lt;/p&gt;
&lt;p&gt;Redux is good for when you want to add indirection to decouple things from “what happened” to “how things change” (parent to child components)(2).&lt;/p&gt;
&lt;p&gt;Here’s a comprehensive bullet point taken from (1):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wanting to write your state management logic completely separate from the UI layer&lt;/li&gt;
&lt;li&gt;Sharing state management logic between different UI layers (such as an application that is being migrated from AngularJS to React)&lt;/li&gt;
&lt;li&gt;Using the power of Redux middleware to add additional logic when actions are dispatched&lt;/li&gt;
&lt;li&gt;Being able to persist portions of the Redux state&lt;/li&gt;
&lt;li&gt;Enabling bug reports that can be replayed by developers&lt;/li&gt;
&lt;li&gt;Faster debugging of logic and UI while in development&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;State Management&lt;/h3&gt;
&lt;p&gt;State management is how state changes over time. That means, we have to have these three functionalities: &lt;em&gt;store&lt;/em&gt; an initial value, &lt;em&gt;read&lt;/em&gt; the current value, &lt;em&gt;update&lt;/em&gt; a value (1). React Context by itself does not do that. Firstly, the value of React Context is decided by it’s parent component. Secondly, React Context with useState or useReducer gives us the functionality to update the values in context. Together, it finally gives us the functionality of state management. By itself, React Context is not enough to be considered state management.&lt;/p&gt;
&lt;h3&gt;Use What, When?&lt;/h3&gt;
&lt;p&gt;Use React Context for when you want values easily accessible to a part of your React component tree, without props drilling.&lt;/p&gt;
&lt;p&gt;You can use React Context and useReducer together for state management of a particular portion of your React application.&lt;/p&gt;
&lt;p&gt;Use Redux if you have a lot of application state needed to be managed throughout your app, or for any of the bullet point reasons mentioned under the Redux section.&lt;/p&gt;
&lt;p&gt;Information gathered from the great blog posts written at ”&lt;a href=&quot;https://blog.isquaredsoftware.com/2021/01/blogged-answers-why-react-context-is-not-a-state-management-tool-and-why-it-doesnt-replace-redux/&quot;&gt;Why React Context Is Not a State Management Tool and Why It Doesn’t Replace Redux&lt;/a&gt;,(1)” ”&lt;a href=&quot;https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/&quot;&gt;Redux, Not Dead Yet!&lt;/a&gt;,(2)” ”&lt;a href=&quot;https://changelog.com/posts/when-and-when-not-to-reach-for-redux&quot;&gt;When and When Not To Reach For Redux&lt;/a&gt;,” and ”&lt;a href=&quot;https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367&quot;&gt;You Might Not Need Redux.&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;For information on dependency injections, information was gathered from ”&lt;a href=&quot;https://itnext.io/dependency-injection-in-react-6fcdbd2005e6&quot;&gt;Dependency Injection in React&lt;/a&gt;”&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript Closures]]></title><description><![CDATA[Even though JavaScript engines compile and interpret JavaScript code, JavaScript is still considered to be a compiled language. Why does…]]></description><link>http://riiniii.github.io/code-bites/JavaScript Closures/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/JavaScript Closures/</guid><pubDate>Sun, 20 Dec 2020 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;Even though JavaScript engines compile and interpret JavaScript code, JavaScript is still considered to be a &lt;strong&gt;compiled&lt;/strong&gt; &lt;strong&gt;language&lt;/strong&gt;. Why does this matter? &lt;/p&gt;
&lt;p&gt;This matters to us because during compilation time is when JavaScript &lt;strong&gt;determines the lexical scope&lt;/strong&gt; of its variables, functions, and blocks in relation to each other.  &lt;/p&gt;
&lt;p&gt;Thus, at compile time, our mapping of all the scopes in relation to each other is done. &lt;/p&gt;
&lt;p&gt;Let’s give an example of code with three different scopes. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; desserts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Crepe Cake&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dessertId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
									&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Chocolate Cake&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dessertId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
									&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Chocolate Ice Cream&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dessertId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDessertName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dessertId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dessert &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; desserts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dessert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dessertId &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; dessertId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dessert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dessertName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDessertName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dessertName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// Crepe Cake&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, we have: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;global scope&lt;/li&gt;
&lt;li&gt;function scope of getDessertName&lt;/li&gt;
&lt;li&gt;block scope of the for loop inside the getDessertName function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Scope (1) nests scope (2) and (3), and scope (2) nests scope (3). Any scope that is nested under another parent scope can access all variables and functions in the parent scope.  &lt;/p&gt;
&lt;p&gt;This is relevant for closure because closures allow us to save values &lt;strong&gt;outside of its current scope&lt;/strong&gt; with the help of &lt;strong&gt;functions&lt;/strong&gt;. If you aren’t working with functions, then you don’t have a closure! &lt;/p&gt;
&lt;p&gt;In layman terms, a closure is when a function returns a function that references variables outside of its own scope. This is really helpful when you want to save a value and come back to use it later. &lt;/p&gt;
&lt;p&gt;I personally often use it with event listeners. I tie a value to the event listener, then later it is called and can access the value I tied it too. Here’s an example!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buttonInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;beep&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;boop&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; boop&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;beep&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;buttonWrapper&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;buttonType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buttonData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buttonInfo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;buttonType&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; buttonData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; beepButtonType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buttonWrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;beep&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// beepButtonType can be called again whenever you want, and it can access the specific&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// data it received when it was first called with buttonWrapper(&apos;beep&apos;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// buttonData is saved whenever buttonWrapper is called.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Closures work well especially whenever you try to curry a function, or just generally in functional programming!&lt;/p&gt;
&lt;p&gt;Closures are also good for when we want to privately make changes to a variable. An example of that would be below. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;incrementCakeLoveCount&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// our &quot;private&quot; variable, that cannot be accessed from outer scope!&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cakeLoveCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;cake&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		cakeLoveCount &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; cake&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loveCount
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cakeLoveCount
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; incrementer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;incrementCakeLoveCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loveCount&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;chocolate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loveCount&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;strawberry-shortcake&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 10.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully this code bite was an easy introduction or refresh on how closures work with scope, and how you can use them.&lt;/p&gt;</content:encoded></item></channel></rss>