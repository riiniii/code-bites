<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Renee Huang]]></title><description><![CDATA[A simple, fixed sidebar two columns Gatsby.js blog starter.]]></description><link>http://riiniii.github.io/code-bites</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 21 Jan 2021 13:50:39 GMT</lastBuildDate><item><title><![CDATA[Redux vs React Context]]></title><description><![CDATA[The ever-burning question of what really is the difference between Redux and React Context, and when should we use Redux or React Context…]]></description><link>http://riiniii.github.io/code-bites/Redux vs React Context/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/Redux vs React Context/</guid><pubDate>Sun, 27 Dec 2020 07:26:03 GMT</pubDate><content:encoded>&lt;p&gt;The ever-burning question of what really is the difference between Redux and React Context, and when should we use Redux or React Context…?&lt;/p&gt;
&lt;p&gt;When we look at things from a very, very, very… very… high level, it may seem that they do the same things. Both are able to update values from one part of your React web application and have the updated values reflected in another. From a very high level this stands true. But when we zoom in there are, of course, differences.&lt;/p&gt;
&lt;p&gt;Here are the differences in a nutshell:&lt;/p&gt;
&lt;h3&gt;React Context&lt;/h3&gt;
&lt;p&gt;React Context is &lt;strong&gt;not&lt;/strong&gt; a state management tool like Redux is, it’s actually based on the dependency injection pattern. Thus, React Context through its dependency injection pattern supports abstractions, makes it easier to decompose program components, all with the wonderful feature of allowing props to be accessible through many levels of components without props drilling. React Context only supports passing down one value, though that value can be an object containing many values.&lt;/p&gt;
&lt;h3&gt;Redux&lt;/h3&gt;
&lt;p&gt;Redux on the other hand is fully fledged application state manager that can be used across many different languages and frameworks (not just React!). Redux is good for large and complicated web applications, and is good for visualizing and understanding well how the changes were made over time.&lt;/p&gt;
&lt;p&gt;Redux is good for when you want to add indirection to decouple things from “what happened” to “how things change” (parent to child components)(2).&lt;/p&gt;
&lt;p&gt;Here’s a comprehensive bullet point taken from (1):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wanting to write your state management logic completely separate from the UI layer&lt;/li&gt;
&lt;li&gt;Sharing state management logic between different UI layers (such as an application that is being migrated from AngularJS to React)&lt;/li&gt;
&lt;li&gt;Using the power of Redux middleware to add additional logic when actions are dispatched&lt;/li&gt;
&lt;li&gt;Being able to persist portions of the Redux state&lt;/li&gt;
&lt;li&gt;Enabling bug reports that can be replayed by developers&lt;/li&gt;
&lt;li&gt;Faster debugging of logic and UI while in development&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;State Management&lt;/h3&gt;
&lt;p&gt;State management is how state changes over time. That means, we have to have these three functionalities: &lt;em&gt;store&lt;/em&gt; an initial value, &lt;em&gt;read&lt;/em&gt; the current value, &lt;em&gt;update&lt;/em&gt; a value (1). React Context by itself does not do that. Firstly, the value of React Context is decided by it’s parent component. Secondly, React Context with useState or useReducer gives us the functionality to update the values in context. Together, it finally gives us the functionality of state management. By itself, React Context is not enough to be considered state management.&lt;/p&gt;
&lt;h3&gt;Use What, When?&lt;/h3&gt;
&lt;p&gt;Use React Context for when you want values easily accessible to a part of your React component tree, without props drilling.&lt;/p&gt;
&lt;p&gt;You can use React Context and useReducer together for state management of a particular portion of your React application.&lt;/p&gt;
&lt;p&gt;Use Redux if you have a lot of application state needed to be managed throughout your app, or for any of the bullet point reasons mentioned under the Redux section.&lt;/p&gt;
&lt;p&gt;Information gathered from the great blog posts written at ”&lt;a href=&quot;https://blog.isquaredsoftware.com/2021/01/blogged-answers-why-react-context-is-not-a-state-management-tool-and-why-it-doesnt-replace-redux/&quot;&gt;Why React Context Is Not a State Management Tool and Why It Doesn’t Replace Redux&lt;/a&gt;,(1)” ”&lt;a href=&quot;https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/&quot;&gt;Redux, Not Dead Yet!&lt;/a&gt;,(2)” ”&lt;a href=&quot;https://changelog.com/posts/when-and-when-not-to-reach-for-redux&quot;&gt;When and When Not To Reach For Redux&lt;/a&gt;,” and ”&lt;a href=&quot;https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367&quot;&gt;You Might Not Need Redux.&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;For information on dependency injections, information was gathered from ”&lt;a href=&quot;https://itnext.io/dependency-injection-in-react-6fcdbd2005e6&quot;&gt;Dependency Injection in React&lt;/a&gt;”&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript Closures]]></title><description><![CDATA[JavaScript Closures Even though JavaScript engines compile and interpret JavaScript code, JavaScript is still considered to be a compiled…]]></description><link>http://riiniii.github.io/code-bites/JavaScript Closures/</link><guid isPermaLink="false">http://riiniii.github.io/code-bites/JavaScript Closures/</guid><pubDate>Sun, 20 Dec 2020 07:26:03 GMT</pubDate><content:encoded>&lt;h1&gt;JavaScript Closures&lt;/h1&gt;
&lt;p&gt;Even though JavaScript engines compile and interpret JavaScript code, JavaScript is still considered to be a &lt;strong&gt;compiled&lt;/strong&gt; &lt;strong&gt;language&lt;/strong&gt;. Why does this matter? &lt;/p&gt;
&lt;p&gt;This matters to us because during compilation time is when JavaScript &lt;strong&gt;determines the lexical scope&lt;/strong&gt; of its variables, functions, and blocks in relation to each other.  &lt;/p&gt;
&lt;p&gt;Thus, at compile time, our mapping of all the scopes in relation to each other is done. &lt;/p&gt;
&lt;p&gt;Let’s give an example of code with three different scopes. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; desserts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Crepe Cake&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dessertId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
									&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Chocolate Cake&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dessertId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
									&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Chocolate Ice Cream&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dessertId&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDessertName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;dessertId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dessert &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; desserts&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dessert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dessertId &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; dessertId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; dessert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; dessertName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getDessertName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dessertName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// Crepe Cake&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the above example, we have: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;global scope&lt;/li&gt;
&lt;li&gt;function scope of getDessertName&lt;/li&gt;
&lt;li&gt;block scope of the for loop inside the getDessertName function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Scope (1) nests scope (2) and (3), and scope (2) nests scope (3). Any scope that is nested under another parent scope can access all variables and functions in the parent scope.  &lt;/p&gt;
&lt;p&gt;This is relevant for closure because closures allow us to save values &lt;strong&gt;outside of its current scope&lt;/strong&gt; with the help of &lt;strong&gt;functions&lt;/strong&gt;. If you aren’t working with functions, then you don’t have a closure! &lt;/p&gt;
&lt;p&gt;In layman terms, a closure is when a function returns a function that references variables outside of its own scope. This is really helpful when you want to save a value and come back to use it later. &lt;/p&gt;
&lt;p&gt;I personally often use it with event listeners. I tie a value to the event listener, then later it is called and can access the value I tied it too. Here’s an example!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buttonInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;beep&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;boop&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; boop&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;beep&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;buttonWrapper&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;buttonType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buttonData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buttonInfo&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;buttonType&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; buttonData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; beepButtonType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buttonWrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;beep&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// beepButtonType can be called again whenever you want, and it can access the specific&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// data it received when it was first called with buttonWrapper(&apos;beep&apos;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// buttonData is saved whenever buttonWrapper is called.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Closures work well especially whenever you try to curry a function, or just generally in functional programming!&lt;/p&gt;
&lt;p&gt;Closures are also good for when we want to privately make changes to a variable. An example of that would be below. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;incrementCakeLoveCount&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// our &quot;private&quot; variable, that cannot be accessed from outer scope!&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cakeLoveCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; 
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;cake&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		cakeLoveCount &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; cake&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;loveCount
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cakeLoveCount
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; incrementer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;incrementCakeLoveCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loveCount&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;chocolate&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 5&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;incrementer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;loveCount&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;strawberry-shortcake&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 10.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully this code bite was an easy introduction or refresh on how closures work with scope, and how you can use them.&lt;/p&gt;</content:encoded></item></channel></rss>