{"componentChunkName":"component---src-templates-blog-post-js","path":"/JavaScript Closures/","result":{"data":{"site":{"siteMetadata":{"title":"Renee Huang"}},"markdownRemark":{"id":"97ba1a0a-b322-594a-a79d-7fa9c8fb5530","excerpt":"Even though JavaScript engines compile and interpret JavaScript code, JavaScript is still considered to be a compiled language. Why does this matter?  This…","html":"<p>Even though JavaScript engines compile and interpret JavaScript code, JavaScript is still considered to be a <strong>compiled</strong> <strong>language</strong>. Why does this matter? </p>\n<p>This matters to us because during compilation time is when JavaScript <strong>determines the lexical scope</strong> of its variables, functions, and blocks in relation to each other.  </p>\n<p>Thus, at compile time, our mapping of all the scopes in relation to each other is done. </p>\n<p>Let’s give an example of code with three different scopes. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">\t<span class=\"token keyword\">var</span> desserts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Crepe Cake'</span><span class=\"token punctuation\">,</span> dessertId<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Chocolate Cake'</span><span class=\"token punctuation\">,</span> dessertId<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t<span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Chocolate Ice Cream'</span><span class=\"token punctuation\">,</span> dessertId<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">getDessertName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dessertId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> dessert <span class=\"token keyword\">of</span> desserts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dessert<span class=\"token punctuation\">.</span>dessertId <span class=\"token operator\">===</span> dessertId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> dessert<span class=\"token punctuation\">.</span>name\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">var</span> dessertName <span class=\"token operator\">=</span> <span class=\"token function\">getDessertName</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dessertName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Crepe Cake</span></code></pre></div>\n<p>In the above example, we have: </p>\n<ol>\n<li>global scope</li>\n<li>function scope of getDessertName</li>\n<li>block scope of the for loop inside the getDessertName function</li>\n</ol>\n<p>Scope (1) nests scope (2) and (3), and scope (2) nests scope (3). Any scope that is nested under another parent scope can access all variables and functions in the parent scope.  </p>\n<p>This is relevant for closure because closures allow us to save values <strong>outside of its current scope</strong> with the help of <strong>functions</strong>. If you aren’t working with functions, then you don’t have a closure! </p>\n<p>In layman terms, a closure is when a function returns a function that references variables outside of its own scope. This is really helpful when you want to save a value and come back to use it later. </p>\n<p>I personally often use it with event listeners. I tie a value to the event listener, then later it is called and can access the value I tied it too. Here’s an example!</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> buttonInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>beep<span class=\"token operator\">:</span> <span class=\"token string\">'boop'</span><span class=\"token punctuation\">,</span> boop<span class=\"token operator\">:</span> <span class=\"token string\">'beep'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buttonWrapper</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">buttonType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> buttonData <span class=\"token operator\">=</span> buttonInfo<span class=\"token punctuation\">[</span>buttonType<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> buttonData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> beepButtonType <span class=\"token operator\">=</span> <span class=\"token function\">buttonWrapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beep'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// beepButtonType can be called again whenever you want, and it can access the specific</span>\n<span class=\"token comment\">// data it received when it was first called with buttonWrapper('beep')</span>\n<span class=\"token comment\">// buttonData is saved whenever buttonWrapper is called.</span></code></pre></div>\n<p>Closures work well especially whenever you try to curry a function, or just generally in functional programming!</p>\n<p>Closures are also good for when we want to privately make changes to a variable. An example of that would be below. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">incrementCakeLoveCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// our \"private\" variable, that cannot be accessed from outer scope!</span>\n\t<span class=\"token keyword\">let</span> cakeLoveCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token parameter\">cake</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tcakeLoveCount <span class=\"token operator\">+=</span> cake<span class=\"token punctuation\">.</span>loveCount\n\t\t<span class=\"token keyword\">return</span> cakeLoveCount\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> incrementer <span class=\"token operator\">=</span> <span class=\"token function\">incrementCakeLoveCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">incrementer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>loveCount<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'chocolate'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">incrementer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>loveCount<span class=\"token operator\">:</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'strawberry-shortcake'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10.5</span></code></pre></div>\n<p>Hopefully this code bite was an easy introduction or refresh on how closures work with scope, and how you can use them.</p>","frontmatter":{"title":"JavaScript Closures","date":"December 20, 2020","description":"A code bite on JavaScript Closures."}}},"pageContext":{"slug":"/JavaScript Closures/","previous":null,"next":{"fields":{"slug":"/Redux vs React Context/"},"frontmatter":{"title":"Redux vs React Context"}}}},"staticQueryHashes":["1246554614","2841359383"]}