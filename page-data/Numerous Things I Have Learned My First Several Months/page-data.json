{"componentChunkName":"component---src-templates-blog-post-js","path":"/Numerous Things I Have Learned My First Several Months/","result":{"data":{"site":{"siteMetadata":{"title":"Renee Huang"}},"markdownRemark":{"id":"3d52ba7c-c5cc-5576-9208-13145858124b","excerpt":"Inspired after Dan Abramov’s 100 things he learned. This write up includes various things I’ve learned this year starting my role as a full stack developer, as…","html":"<p>Inspired after <a href=\"https://twitter.com/dan_abramov/status/1470613731071696896\">Dan Abramov’s 100 things he learned</a>. This write up includes various things I’ve learned this year starting my role as a full stack developer, as well as comments on Dan Abramov’s TIL’s. I’ll likely be adding in a few more as the year wraps up a bit more!</p>\n<h3>A random mix of things I have learned</h3>\n<ul>\n<li>Even if you deploy your backend and frontend code together, the client themselves could potentially be able to ping the new backend with old client code. This is easily doable in SPA’s, where we might not have as many page reloads or refreshes. Or, just if the client’s code is cached too! Aim for backwards compatibility wherever you can.</li>\n<li>I found in Sequelize you can eagerly load associations with one call to the DB (essentially, they do the join for us). This is powerful and it’s imperative to familiarize yourself with all the associations the tables have with each other. I’ve on occasion made an extra DB call since I forgot that they were related. JOIN like it’s a good friend!</li>\n<li>But also, be wary of eagerly loading (/JOINing) indiscriminately since it is a more expensive procedure. Especially if a particular table can have several or tens association to another table.</li>\n<li>For one to many relation, don’t forget that you can query by the one or by the many, depending on what you need! It’s helpful to flip the JOIN from around to see if you can get some performance improvements.</li>\n<li>If you find yourself JOINing too often and then iterating through each result, maybe it’s time to add an index!</li>\n<li>Log out your SQL queries that are used by your ORM’s under the hood.</li>\n<li>Use the EXPLAIN keyword to test out your queries logged from your ORM. Play around with indices or joins and other variables to see if performance can be improved.</li>\n<li>Our database engines are a bit of a black box, and our tables are of varying sizes. The only way to accurately benchmark is from testing on actual data sets.</li>\n<li>Implement SRP (Single Responsibility Principle) where you can, but for javascript at least, there’s no need to do it at the cost of brevity. Clarity over brevity always.</li>\n<li>Keep your code DRY. You can keep things DRY locally, across a few files, or as shared code across the code base. The larger usage area there is, the more effort should be used to ensure the code has less external dependencies and more modularized.</li>\n<li>Functions used locally can afford to have less checks and assumptions about them. Functions in support files or used in various other files, should aim to do as they say with as little external dependencies as possible. Keep them well tested.</li>\n<li>Always review your code, but only after taking a break from it. Look at it with clear eyes and from a code reviewer’s point of view.</li>\n<li>Ask questions liberally, after thinking about them of course. Or even type out the question and then read it back to yourself, gain some insights, and delete the question. Essentially, rubber ducky yourself.</li>\n<li>Be open to feedback and treat it as your food for growth.</li>\n<li>Code reviews and coding style is important. It also invokes a sense of responsibility to your code. Create a culture around it.</li>\n<li>Set high standards for your code. Treat it as what you would like to see if you were using it, even if your team may have different standards. (Disclaimer: This is not in response to current team.)-</li>\n<li>Healthy boundaries are a necessary part of human life and emotional well-being. Similarly, a healthy and happy software engineer should make sure to enforce their boundaries for timelines/deadlines for their tasks. Squeezing in a task will fry your logical reasoning and is prone to introducing some bugs. It will also definitely decrease quality of code. Decreased code quality which you will have to answer to once your code is released out into the wild.</li>\n<li>Just because existing code base is scrappy, doesn’t mean you should code similarly. Aim to improve where you can. But also be cognizant that more changes means more potential areas of introducing bugs. Factor that in to your timeline when you take on a refactoring task or “improving code quality while you’re at it mindset.”</li>\n<li>It’s always a fight between generalizing your code and making it too general. When in doubt, start local. If you find yourself repeating logic or similar calls, then reformat. Don’t over-engineer unnecessarily.</li>\n<li>Similarly, no need to be crafty with logical operators (speaking to Javascript particularly). Use ternaries to be more explicit with output. I am one hundred percent behind clarity over all else.</li>\n<li>Comment where things aren’t clear from just reading code itself! Also, no need to comment to just repeat code functionality.</li>\n<li>Sometimes, it’s nice to make API calls together like in a Promise.all. Seems fancy and like it’d save time. Make sure to factor in though whether you could exit early by making one API call first. This can be easily determined on whether one call depends on another.</li>\n<li>Give your CSS some consistent framework to work off of.</li>\n<li>Have a main CSS variables files to work off of. It’s also easier to implement different themes this way.</li>\n<li>Hashing out a solution to code is easy. Creating robust, well-tested code, that’s been through a round of PR’s, takes a lot longer. So at least triple your time developer estimate time.</li>\n<li>When you review your code, check if any of your helper functions are doing the same things in different ways. Can they be consolidated?</li>\n<li>Read textbooks, documentations, and source code. Textbooks give you a knowledge dump. Documentations show things how they’d like it to work. Source code (or tracing it) is when all else fails and is used as a holy grail of truth.</li>\n<li>Try to have good relations with your team if possible! Put effort in, and don’t take things personally. We’re all just trying to do our jobs.</li>\n<li>Picking up some side projects outside of work that is low commitment, and just for fun can be quite liberating compared to code you have to create at work. It’s a good place to learn something new and to just re-ignite your love for coding.</li>\n<li>If you don’t have time for extra projects, that is perfectly fine too. Compartmentalize your job as a job.</li>\n<li>Strive towards your goals (if any) and aim to not be reactively motivated.</li>\n</ul>\n<h3>Also, some things I resonated with reading Dan’s hundred of TIL’s!</h3>\n<p>“constraints and edge cases drive your design. constraints exclude 99% of possible designs. edge cases accentuate the remaining choices and help you pick which one sucks the least (or least surprisingly). then if the common case makes sense you’re golden”</p>\n<ul>\n<li>I think this will really help with my problem solving. It’s easy to come up with a general solution. Having the specific solution really depends on the problem constraints and possible edge cases.</li>\n</ul>\n<p>“edge cases are your bread and butter. they’re more common than you think (with enough usage anything happens) and they are a first-class part of your design. you should have satisfactory (if not satisfying) answers to how the system behaves even (especially) when it’s wonky”</p>\n<ul>\n<li>I love this logical deduction reasoning. I find it helpful to go core to edge cases then back to core. The back and forth really helps pick up any missed bugs.</li>\n</ul>\n<p>“you are not your project. it also seems unwise to pretend that it isn’t in some way a significant part of your life. not “work hustle 4 da boss” capitalism thing but more like “regardless of power structures i’ve put a lot into this and i have reasons to care”. that’s valid”</p>\n<ul>\n<li>Great point. Nothing to add here.</li>\n</ul>\n<p>“semver is “just” a social contract. yes it’s important to communicate intent. breaking changes shouldn’t go into minors/patches. but even fixing a bug is a breaking change for someone relying on the buggy behavior. semver is first and foremost a human communication tool”</p>\n<ul>\n<li>Stick to the social contracts software development principles have created for us! There their for a reason. If you do break the contract for any reason, make sure to document it why you’ve done so!</li>\n</ul>\n<p>“you keep hearing complaints about an API. the fix is simple, like flipping a switch. fine!! you change it. suddenly, the other half, previously quiet, comes frustrated. oops. turns out both options were equally disliked. congrats, you’ve just churned your users for no reason”</p>\n<ul>\n<li>If you’ve created an API, you have created an interface that various parts of your code speak to. You’ve created a social contract that other people’s code have bought into. It’s like speaking a language and then saying “water” is now called “awret.” Or if you’ve deprectaed an API it’s like saying this language is a dead language now. So, if you change anything, aim for backwards compatibility as much as possible!</li>\n</ul>\n<p>“naming is one of the most important decisions you will be doing. it’s not just bikeshedding. give it appropriate time and effort. you will mess it up anyway though.”</p>\n<ul>\n<li>Name your code like you will name your kids. AKA, try your best, but it might come out wrong sometimes still. 😥 Nothing a few iterations wouldn’t fix!</li>\n</ul>\n<p>“all people are irreplaceable. every iteration of a team is a new team in some sense. in some ways this is poignant, in others this is exciting”</p>\n<ul>\n<li>This saying helped me separate myself from my company. We are all just organisms! Companies and people alike. Thus, we all need healthy boundaries to live well!</li>\n</ul>\n<p>“if you have one scary bug after another, write regression tests but also use this as a signal. something in the model might be broken. complex code isn’t bad, but code built around a flawed model is very bad, complex or not”</p>\n<ul>\n<li>Sometimes it feels like there’s no hope with a hairy and gigantic blob of code. Particularly with no testing suite in place. It’s like the wild wild west and you’re trying to trek through a jungle. If we’ve gotten to this point, be adamant that we at least implement some tests (and regression tests) to ensure that a single change does not topple the whole system.</li>\n</ul>\n<p>“if your technical vision is sound in theory, and you chip away at the practical obstacles with perseverance, organizational support, pragmatic compromises, and optimism, eventually the theory wins”</p>\n<ul>\n<li>As I’ve started to code more and more, I’ve realized that sound design is more important than coding. The larger a task is the more time you should spend fleshing out the design as well. It’s always helpful to create a testing sheet for any sized task, to make sure you’ve kept track of edge cases well.</li>\n</ul>\n<p>“write a script to do releases for you. get the CI to create automatic prereleases from main so you can always test the latest main in codesandbox (and other libs can run tests against nightlies). a stable release should patch+promote a CI version, not build locally”</p>\n<ul>\n<li>We currently do manual releases. This seems fun, to have a script run automated releases. It’d have to work with <a href=\"https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/\">Jira</a>. Something to consider!</li>\n</ul>\n<p>“if you’re trying to introduce a new workflow (eg different task tracking tool) to the team, it’s on you to get people to feel good about it and try it out (“i know you prefer keeping tasks in a doc, let me sync that doc for you for a bit and we’ll see how it goes”)”</p>\n<ul>\n<li>This is good to know! Reminds me of the saying “be the change you want to see.” That’s also to say that each of us can be a leader, whether you are defined as one by the org, or just leading through example/actions.</li>\n</ul>\n<p>“occasionally, it’s good to take the minified code, run it though Prettier, and quickly read through it. you might spot things that shouldn’t be there, things that could be minified better, or get ideas on how to reduce the size”</p>\n<ul>\n<li>I don’t have to deal with size problem much yet, and our team doesn’t add libraries randomly. It’d definitely be cool to have some type of auto generated report post commit though on package sizing. That way, we can visually see any package size increases. But anyways, client side minified code bundle size is not an issue for us yet.</li>\n</ul>\n<p>“even if someone is a great developer or a good friend, it still doesn’t mean they’ll necessarily succeed on your team. this can be gut-wrenching for all parties when it doesn’t work out.”</p>\n<ul>\n<li>Environment matters, and sadly so do the occasional failures. Life moves on, and there are other projects. Find an environment where you can succeed in.</li>\n</ul>\n<p>“innovation is not linear. sometimes you need to make it worse to make it better.”</p>\n<ul>\n<li>Improvements of my coding skills are not either. It sometimes feels like a rough journey. I know i’m improving, but it’s definitely not always a linear improvement.</li>\n</ul>\n<p>“expanding on that, when you replace a system, you usually need to go incrementally. otherwise it’s too much risk for stakeholders to go all-in. but that means you won’t reap the benefits of <em>replacing</em> it until the end. you’re <em>adding</em> so likely regressing. set expectations.”</p>\n<ul>\n<li>Software is only useful and meaningful due to the people that consume it. Communication is key, and being upfront with your expectationis is part of that. People do not like surprises, but are more than likely willing to work with you!</li>\n</ul>\n<p>“your writing in project blog/docs will be copy pasted verbatim, rephrased, adapted, and then posted on content farms, other people’s personal blogs and slides. in a way that’s actually kind of cool because this means your writing worked”</p>\n<ul>\n<li>Hello, that’s exactly what I’m doing. One day I hope I can be more of an original content creator(well, sometimes I am for particular random problems)! But for now, I’m happy to just take notes of things I learn.</li>\n</ul>\n<p>“if you fix something, add a test that fails. if you don’t add one, you’re tacitly agreeing that someone else (including you) will break it again.”</p>\n<ul>\n<li>Yes to this, I always make sure to add tests for cases I might have missed. Got to patch up your bugs with little band aids when you can, and to ensure more robustness going forward!</li>\n</ul>","frontmatter":{"title":"Numerous Things I Have Learned My First Several Months as a Full Stack Developer","date":"December 16, 2021","description":"A hodge podge list of TIL, and comments on Dan Abramov's list of TIL as well!"}}},"pageContext":{"slug":"/Numerous Things I Have Learned My First Several Months/","previous":{"fields":{"slug":"/User Authentication in Django/"},"frontmatter":{"title":"User Authention in Django"}},"next":null}},"staticQueryHashes":["1246554614","2841359383"]}